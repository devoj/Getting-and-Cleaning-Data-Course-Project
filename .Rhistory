xx$getmean[m]
xx$getmean["m"]
cachmean(x)
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
cachemean(x)
cachemean(xx)
rm(xx)
xx <- makeVector(x)
cachevector(xx)
cachemean(xx)
cachemean(xx)
x
xx
library
dir
dir()
ls()
env()
??environment
xx$set
class(xx$set)
cachemean(x)
cachemean(xx)
rm(xx)
xx <- makeVector(x)
cachemean(xx)
cachemean(xx)
x <- 1:1000000000
x <- 1:100000000
mean(x)
mean(x)
y < 1:10
y <- 1:10
mean(y)
mean(x)
mean(x)
mean(x)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(x)
rm(x)
ls()
rm(list = ls())
x <- 1:100000000
ls()
x
rm(x)
ls()
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- 1:1000
makeVector(x)
makeVector(x) -> xx
summary(xx)
xx$get()
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
rm(list = ls())
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
name(vect2) <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data, cnames)
play()
?colnames
colnames(my_data) <- cnames
nxt()
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 5 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
source("https://bioconductor.org/biocLiteR")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
set.seed(1)
rpois(5, 2)
rm(list = ls())
library("swirl")
swirl
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "speed")
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "")
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(Rtools)
library(RTools)
install.packages("Rtools")
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
?biocLite
library(rhdf5)
install.packages("rhdf5")
biocLite("rhdf5")
library("rhdf5")
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringAsFactors = FALSE)
read.csv(path2csv, stringsAsFactors = FALSE)
mydr <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
View(mydr)
View(mydr)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:ip_id)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
play()
rm(cran)
rm(cran2)
rm(cran3)
rm(mydr)
nxt()
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
play()
?n
?n_distinct
nxt()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679) -> top_counts
top_counts
View(top_counts)
arrange(top_counts, desc(count) -> top_counts_sorted
)
arrange(top_counts, desc(count)) -> top_counts_sorted
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465) -> top_unique
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
reset()
submit()
submit()
submit()
submit()
submit()
library(tidry)
library(tidyr)
students
?gater
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
View(students2)
students2
submit()
students3
submit()
submit()
submit()
submit()
?spread
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
View(students4)
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed") -> passed
mutate(failed, status = "failed") -> failed
?bind_rows
bind_rows(passed, failed)
sat
summary(sat)
str(sat)
tail(sat)
dim(sat)
names(sat)
?select
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
ymd("1989-05-17") -> my_date
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
udate(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 23, minutes = 35)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tmz = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kond")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- arrive - with_tz(mdy("June 17, 2008"), tz = "Singapore")
last_time <- arrive - mdy(("June 17, 2008"), tz = "Singapore")
last_time <- arrive - mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long(last_time, arrive, tzone = attr(start, "Singapore", end, "America/New_York"))
how_long <- new_interval(last_time, arrive, tzone = attr(start, "Singapore", end, "America/New_York"))
how_long <- new_interval(last_time, arrive, tzone = attr(start, "America/New_York"))
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("httr")
library(httr)
?httr
?install.packages
?Oauth
?oauth
?oauth_endpoint
oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("test_DJ", "b139800f6ef8899fbe8d", "a4be4f9fbd2c6a891b0b42ab4fa891021df5f3b7")
oauth_endpoints("github")
myapp <- oauth_app("github", "b139800f6ef8899fbe8d", "a4be4f9fbd2c6a891b0b42ab4fa891021df5f3b7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
View(req)
library("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
new <- fromJSON(req)
req <- GET("https://api.github.com/users/jtleek/repos.json", gtoken)
library(httr)
req <- GET("https://api.github.com/users/jtleek/repos.json", gtoken)
new <- fromJSON(req)
new <- fromJSON("req")
req
myapp <- oauthapp("test_DJ", key = "b139800f6ef8899fbe8d", secret = "a4be4f9fbd2c6a891b0b42ab4fa891021df5f3b7")
myapp <- oauth_app("test_DJ", key = "b139800f6ef8899fbe8d", secret = "a4be4f9fbd2c6a891b0b42ab4fa891021df5f3b7")
github_token <- oauth2.0_token(oauth_endpoints("test_DJ"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
test <- GET("https://api.github.com/users/jtleek/repos", gtoken)
test
test_JSON <- fromJSON(test)
?jsonlite
?JSONlite
test <- fromJSON(GET("https://api.github.com/users/jtleek/repos", gtoken))
test <- fromJSON(GET("https://api.github.com/users/jtleek/repos.json", gtoken))
test <- GET("https://api.github.com/users/jtleek/repos.json", gtoken)
test
View(test)
head(test)
str(test)
head(test)
class(test)
dim(test)
test
req
test <- GET("https://api.github.com/users/jtleek/repos", gtoken)
test
test <- toJSON(GET("https://api.github.com/users/jtleek/repos", gtoken))
test <- fromJSON(toJSON(GET("https://api.github.com/users/jtleek/repos", gtoken)))
test
toJSON(test)
?content
content(test)
toJSON(content(test))
fromJSON(toJSON(content(test))) -> newtest
newtest
dim(newtest)
class(newtest)
names(newtest)
newtest$pushed_at
newtest$description
str(newtest)
names(newtest)
newtest$id
names(newtest)
names(test$description)
summary(test$description)
class(names$description)
newtest
head(newtest)
library(dplyr)
tb_df(newtest)
tbl_df(newtest)
names(newtest)
newtest$labels_url
View(newtest$labels_url)
newtest$created_at[5]
rm(lis = ls())
rm(list = ls())
source('~/Coursera/Getting and Cleaning Data/Class Project/Course_Project_2.R')
head(Tidy_data)
source('~/Coursera/Getting and Cleaning Data/Class Project/run_analysis.R')
?write.table
write.table(Tidy_data, file = "./Tidy_data.txt", row.names = FALSE)
dir
dir()
write.table(Tidy_data, file = "./Tidy_data.txt", row.names = FALSE)
rm(list = ls())
